# Generated by Django 2.2.1 on 2019-08-28 14:08

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Nombre')),
                ('description', models.CharField(max_length=40, verbose_name='Descripcion')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='Nombre')),
            ],
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Vigente')),
                ('name', models.CharField(max_length=30, verbose_name='Nombre del concurso')),
                ('date_from', models.DateTimeField(verbose_name='Desde')),
                ('date_to', models.DateTimeField(verbose_name='Hasta')),
                ('inscription_date_from', models.DateTimeField(verbose_name='Inscripcion desde')),
                ('inscription_date_to', models.DateTimeField(verbose_name='Inscripcion_hasta')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group', to='cnq.Contest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user1', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_role_choices', models.PositiveIntegerField(choices=[(0, 'Anonimo'), (1, 'Participant'), (2, 'Tutor'), (3, 'Mentor')], default=0, verbose_name='Rol')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('max_uses', models.PositiveIntegerField(null=True, verbose_name='Usos maximos')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_token', to='cnq.Group')),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='Nombre')),
            ],
        ),
        migrations.CreateModel(
            name='TokenUses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_uses', to='cnq.GroupToken')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_uses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RawSchool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=35, validators=[django.core.validators.RegexValidator(message='Caracteres espciales no esta disponibles', regex='^[a-zA-Z ]*$')], verbose_name='Nombre')),
                ('street_name', models.CharField(max_length=40, validators=[django.core.validators.RegexValidator(message='Caracteres espciales no esta disponibles', regex='^[a-zA-Z ]*$')], verbose_name='Direccion')),
                ('street_number', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(99999)], verbose_name='Altura')),
                ('school_types', models.PositiveIntegerField(choices=[(0, 'Publica'), (1, 'Privada'), (2, 'Tecnica Publica'), (3, 'Tecnica Privada'), (4, 'Escuela Rural'), (5, 'Residencia'), (6, 'Tecnica Privada')], validators=[django.core.validators.MinValueValidator(0)], verbose_name='Tipo de escuela')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_location', to='cnq.City')),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='raw_school', to='cnq.Group')),
            ],
        ),
        migrations.CreateModel(
            name='RawProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='Caracteres espciales no esta disponibles', regex='^[a-zA-Z ]*$')], verbose_name='Nombre')),
                ('problem', models.CharField(max_length=70, validators=[django.core.validators.RegexValidator(message='Caracteres espciales no esta disponibles', regex='^[a-zA-Z ]*$')], verbose_name='Problema')),
                ('solution', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator(message='Caracteres espciales no esta disponibles', regex='^[a-zA-Z ]*$')], verbose_name='Solucion')),
                ('diffusion', models.PositiveIntegerField(choices=[(0, 'Mail'), (1, 'Afiches del concurso'), (2, 'Redes Sociales'), (3, 'Medios de comunicacion tradicionales'), (4, 'He participado en años anteriores')], validators=[django.core.validators.MaxValueValidator(4), django.core.validators.MinValueValidator(1)], verbose_name='Difusion')),
                ('category', models.ManyToManyField(related_name='raw_project', to='cnq.Category')),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='raw_project', to='cnq.Group')),
            ],
        ),
        migrations.CreateModel(
            name='RawParticipant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Caracteres espciales no esta disponibles', regex='^[a-zA-Z ]*$')], verbose_name='Nombre')),
                ('last_name', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Caracteres espciales no esta disponibles', regex='^[a-zA-Z ]*$')], verbose_name='Apellido')),
                ('dni', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(10000000), django.core.validators.MaxValueValidator(99999999)], verbose_name='Dni')),
                ('grade_choices', models.PositiveIntegerField(choices=[(0, '4to'), (1, '5to'), (2, '6to'), (3, '7mo')], validators=[django.core.validators.MinValueValidator(0)], verbose_name='Año')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raw_participant', to='cnq.Group')),
            ],
        ),
        migrations.CreateModel(
            name='RawContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1000000000), django.core.validators.MaxValueValidator(9999999999)], verbose_name='Numero del tutor')),
                ('alternative_email', models.EmailField(max_length=70, verbose_name='Mail del tutor alternativo')),
                ('alternative_phone_number', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1000000000), django.core.validators.MaxValueValidator(9999999999)], verbose_name='Numero del tutor alternativo')),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='raw_contact', to='cnq.Group')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category', to='cnq.Category')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_category', to='cnq.Group')),
                ('raw_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raw_project', to='cnq.RawProject')),
            ],
        ),
        migrations.CreateModel(
            name='GroupRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_role_choices', models.PositiveIntegerField(choices=[(0, 'Anonimo'), (1, 'Participant'), (2, 'Tutor'), (3, 'Mentor')], default=0, verbose_name='Rol')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_role', to='cnq.Group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_role', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ContestWinner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_winner', to='cnq.Contest')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_winner', to='cnq.Group')),
            ],
        ),
        migrations.CreateModel(
            name='ContestFinalist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_finalist', to='cnq.Contest')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_finalist', to='cnq.Group')),
            ],
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city', to='cnq.State'),
        ),
        migrations.AlterUniqueTogether(
            name='city',
            unique_together={('name', 'state')},
        ),
    ]
